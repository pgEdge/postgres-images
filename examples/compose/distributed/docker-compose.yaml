services:
  postgres-n1:
    image: ${POSTGRES_IMAGE:-ghcr.io/pgedge/pgedge-postgres:17-spock5-standard}
    container_name: postgres-n1
    restart: always
    environment:
      PGEDGE_USER: pgedge
      PGEDGE_PASSWORD: pgedge
      POSTGRES_USER: pgedge
      POSTGRES_PASSWORD: pgedge
      POSTGRES_DB: acctg
      NODE_NAME: n1
    ports:
      - target: 5432
        published: 6432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB} -h 127.0.0.1 -p 5432"]
      interval: 5s
      timeout: 3s
      retries: 20
    configs:
      - source: init-extensions
        target: /docker-entrypoint-initdb.d/10-init-extensions.sh
        mode: 0755
      - source: configure-spock
        target: /docker-entrypoint-initdb.d/20-configure-spock.sh
        mode: 0755
      - source: restart-postgres
        target: /docker-entrypoint-initdb.d/30-restart-postgres.sh
        mode: 0755
      - source: create-extensions
        target: /docker-entrypoint-initdb.d/40-create-extensions.sh
        mode: 0755
      - source: relax-pg-hba
        target: /docker-entrypoint-initdb.d/45-relax-pg-hba.sh
        mode: 0755
      - source: spock-node-n1
        target: /docker-entrypoint-initdb.d/50-spock-nodes.sh
        mode: 0755

  postgres-n2:
    image: ${POSTGRES_IMAGE:-ghcr.io/pgedge/pgedge-postgres:17-spock5-standard}
    container_name: postgres-n2
    restart: always
    environment:
      PGEDGE_USER: pgedge
      PGEDGE_PASSWORD: pgedge
      POSTGRES_USER: pgedge
      POSTGRES_PASSWORD: pgedge
      POSTGRES_DB: acctg
      NODE_NAME: n2
    ports:
      - target: 5432
        published: 6433
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB} -h 127.0.0.1 -p 5432"]
      interval: 5s
      timeout: 3s
      retries: 20
    configs:
      - source: init-extensions
        target: /docker-entrypoint-initdb.d/10-init-extensions.sh
        mode: 0755
      - source: configure-spock
        target: /docker-entrypoint-initdb.d/20-configure-spock.sh
        mode: 0755
      - source: restart-postgres
        target: /docker-entrypoint-initdb.d/30-restart-postgres.sh
        mode: 0755
      - source: create-extensions
        target: /docker-entrypoint-initdb.d/40-create-extensions.sh
        mode: 0755
      - source: relax-pg-hba
        target: /docker-entrypoint-initdb.d/45-relax-pg-hba.sh
        mode: 0755
      - source: spock-node-n2
        target: /docker-entrypoint-initdb.d/50-spock-nodes.sh
        mode: 0755

  spock-wire:
    image: ${POSTGRES_IMAGE:-ghcr.io/pgedge/pgedge-postgres:17-spock5-standard}
    container_name: spock-wire
    depends_on:
      postgres-n1:
        condition: service_healthy
      postgres-n2:
        condition: service_healthy
    environment:
      PGUSER: pgedge
      PGPASSWORD: pgedge
      DBNAME: acctg
      N1_HOST: postgres-n1
      N2_HOST: postgres-n2
      N1_PORT: "5432"
      N2_PORT: "5432"
    command: ["/bin/bash", "/wire/run.sh"]
    restart: "no"
    configs:
      - source: spock-wire-script
        target: /wire/run.sh
        mode: 0755

configs:
  init-extensions:
    content: |-
      #!/usr/bin/env bash
      set -Eeo pipefail
      EXTENSIONS=("pg_stat_statements" "pgaudit" "snowflake" "spock" "postgis-3")
      PGCONF="$$PGDATA/postgresql.conf"
      echo "Setting shared_preload_libraries to: $${EXTENSIONS[*]}"
      LIBS=$$(IFS=','; echo "$${EXTENSIONS[*]}")
      if grep -q '^[ ]*shared_preload_libraries' "$$PGCONF"; then
        sed -i "s|^[ ]*shared_preload_libraries.*|shared_preload_libraries = '$$LIBS'|" "$$PGCONF"
      else
        echo "shared_preload_libraries = '$$LIBS'" >> "$$PGCONF"
      fi

  configure-spock:
    content: |-
      #!/usr/bin/env bash
      set -Eeo pipefail
      PGCONF="$$PGDATA/postgresql.conf"
      echo "Initializing Spock + logical replication configuration in postgresql.conf"

      echo "listen_addresses = '*'"              >> "$$PGCONF"

      echo "wal_level = 'logical'"              >> "$$PGCONF"
      echo "max_worker_processes = 10"          >> "$$PGCONF"
      echo "max_replication_slots = 10"         >> "$$PGCONF"
      echo "max_wal_senders = 10"               >> "$$PGCONF"
      echo "track_commit_timestamp = 'on'"      >> "$$PGCONF"

      echo "spock.enable_ddl_replication = 'on'"       >> "$$PGCONF"
      echo "spock.include_ddl_repset = 'on'"           >> "$$PGCONF"
      echo "spock.allow_ddl_from_functions = 'on'"     >> "$$PGCONF"
      echo "spock.conflict_resolution = 'last_update_wins'" >> "$$PGCONF"
      echo "spock.save_resolutions = 'on'"             >> "$$PGCONF"
      echo "spock.conflict_log_level = 'DEBUG'"        >> "$$PGCONF"

  restart-postgres:
    content: |-
      #!/usr/bin/env bash
      set -Eeo pipefail
      echo "Mid-sequence restart to apply base configuration..."
      pg_ctl -D "$$PGDATA" -m fast restart

  create-extensions:
    content: |-
      #!/usr/bin/env bash
      set -Eeo pipefail
      EXTENSIONS=("pg_stat_statements" "pgaudit" "snowflake" "spock" "postgis")
      echo "Initializing extensions: $${EXTENSIONS[*]}"
      for EXT in "$${EXTENSIONS[@]}"; do
        echo "Creating extension: $$EXT"
        psql -v ON_ERROR_STOP=1 --username "$$POSTGRES_USER" --dbname "$$POSTGRES_DB" \
          -c "CREATE EXTENSION IF NOT EXISTS \"$$EXT\";"
      done

  relax-pg-hba:
    content: |-
      #!/usr/bin/env bash
      set -Eeo pipefail
      echo "host all all 0.0.0.0/0 md5" >> "$$PGDATA/pg_hba.conf"
      echo "host all all ::/0 md5"     >> "$$PGDATA/pg_hba.conf"
      pg_ctl -D "$$PGDATA" -m fast reload

  spock-node-n1:
    content: |-
      #!/usr/bin/env bash
      set -Eeo pipefail
      psql -v ON_ERROR_STOP=1 --username "pgedge" --dbname "acctg" \
        -c "SELECT spock.node_create(node_name := 'n1', dsn := 'host=postgres-n1 port=5432 dbname=acctg user=pgedge password=pgedge');"

  spock-node-n2:
    content: |-
      #!/usr/bin/env bash
      set -Eeo pipefail
      psql -v ON_ERROR_STOP=1 --username "pgedge" --dbname "acctg" \
        -c "SELECT spock.node_create(node_name := 'n2', dsn := 'host=postgres-n2 port=5432 dbname=acctg user=pgedge password=pgedge');"
  spock-wire-script:
    content: |-
      #!/usr/bin/env bash
      set -Eeo pipefail

      : "$${PGUSER:?PGUSER required}"
      : "$${PGPASSWORD:?PGPASSWORD required}"
      : "$${DBNAME:?DBNAME required}"
      : "$${N1_HOST:?N1_HOST required}"
      : "$${N2_HOST:?N2_HOST required}"
      : "$${N1_PORT:?N1_PORT required}"
      : "$${N2_PORT:?N2_PORT required}"

      echo "[wire] Waiting for $$N1_HOST:$$N1_PORT..."
      for i in {1..120}; do
        if pg_isready -h "$$N1_HOST" -p "$$N1_PORT" -d "$$DBNAME" -U "$$PGUSER" >/dev/null 2>&1; then
          echo "[wire] $$N1_HOST ready."
          break
        fi
        sleep 2
        [[ $$i -eq 120 ]] && { echo "[wire] Timeout waiting for $$N1_HOST"; exit 1; }
      done

      echo "[wire] Waiting for $$N2_HOST:$$N2_PORT..."
      for i in {1..120}; do
        if pg_isready -h "$$N2_HOST" -p "$$N2_PORT" -d "$$DBNAME" -U "$$PGUSER" >/dev/null 2>&1; then
          echo "[wire] $$N2_HOST ready."
          break
        fi
        sleep 2
        [[ $$i -eq 120 ]] && { echo "[wire] Timeout waiting for $$N2_HOST"; exit 1; }
      done

      echo "[wire] Ensuring subscription on n1 (sub_n1n2)..."
      PGPASSWORD="$$PGPASSWORD" psql -h "$$N1_HOST" -p "$$N1_PORT" -U "$$PGUSER" -d "$$DBNAME" -v ON_ERROR_STOP=1 <<'SQL'
      DO $$$$
      BEGIN
        IF NOT EXISTS (SELECT 1 FROM spock.subscription WHERE sub_name = 'sub_n1n2') THEN
          PERFORM spock.sub_create(
            subscription_name := 'sub_n1n2',
            provider_dsn      := 'host=postgres-n2 port=5432 dbname=acctg user=pgedge password=pgedge'
          );
        END IF;
      END$$$$;
      SQL

      echo "[wire] Ensuring subscription on n2 (sub_n2n1)..."
      PGPASSWORD="$$PGPASSWORD" psql -h "$$N2_HOST" -p "$$N2_PORT" -U "$$PGUSER" -d "$$DBNAME" -v ON_ERROR_STOP=1 <<'SQL'
      DO $$$$
      BEGIN
        IF NOT EXISTS (SELECT 1 FROM spock.subscription WHERE sub_name = 'sub_n2n1') THEN
          PERFORM spock.sub_create(
            subscription_name := 'sub_n2n1',
            provider_dsn      := 'host=postgres-n1 port=5432 dbname=acctg user=pgedge password=pgedge'
          );
        END IF;
      END$$$$;
      SQL

      echo "[wire] Wiring complete."
